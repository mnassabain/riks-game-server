This is an exhaustive list of all the data we need to manage a game of Riks.
This list is done without any consideration for networking or object coding, it is just an overview of the data we need to keep track of.
(It doesn't contain actual data, but just examples)
Capital letters variables are meant to describe total numbers.
Once again, don't take naming seriously here, it's not final, I'm just trying to make intentions clear.


1. Static Data
/*************
 Static data refers to read only data that we need to understand the structure of the game.
 Mainly the map descriptor. It is also data that is unrelated to the current game.
 Think of it as data that we literally never have to change once we decide on them.
*************/

---------------------------------------------------------
continents[C][2]
    0 | 1 | 2 | 3 | 4 | 5  
0 [ 9 | 8 | 8 | 7 | 7 | 3 ]
1 [ 7 | 5 | 5 | 3 | 2 | 2 ]

continents[c][0] := Number of territories in that continent (Territories are sorted by continent, this number allows to find index of territories of a continent)
continents[c][1] := Bonus Value of that continent
---------------------------------------------------------

---------------------------------------------------------
territories[T][1..N]
    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
0 [ 1 | 0 | 1 | 1 | 3 | 4 | 4 | 4 | 4 | 4 ]
1 [   | 2 | 3 | 2 | 5 |   |   | 8 | 7 | 8 ]
2 [   | 3 |   | 4 | 6 |   |   |   | 9 |   ]
3 [   |   |   |   | 7 |   |   |   |   |   ]
4 [   |   |   |   | 8 |   |   |   |   |   ]
5 [   |   |   |   | 9 |   |   |   |   |   ]

territories[t][0..N-1] := neighbor territories (variable amount for each territory, but each territory has at least one neighbor)
---------------------------------------------------------

2. Dynamic Data
/*************
 Dynamic data refers to data relevant to one game instance, it will be created and maintained while the game is alive.
It will be only data vital to have a game running, extra stats we want to keep track of for records are not considered.
Also not considering data that could be needed during calculation (like combat), probably going to be used as function parameter rather than being saved
Think about it as "all the data we need to know the current state of the game if we had to save it"
*************/

---------------------------------------------------------
P := Number of players in the game
S := Number of token sets exchanged in the game so far, or we put right away the number of units received for the next set?
firstPlayer := Player randomly decided as first player | Only used twice in the course of a game, might still keep it for recording reasons
activePlayer := Current active player
phase := Current phase
	/* How do we do current phase? Do we count initialization sequence or do we split it?
         * Something like 0:init 1:Reinforcement 2:Offense 3:Fortification?
	 * Or -1:init 0:Reinforcement 1:Offense 3:Fortification?
	 */
turnCapturedTerritories := Captured territories this turn, important to know to grant a token on the first capture of the turn, can even be saved as extra stat like most captures in a single turn

---------------------------------------------------------

---------------------------------------------------------
board[T][2]
    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
0 [-1 |-1 |-1 |-1 |-1 |-1 |-1 |-1 |-1 |-1 ]
1 [ 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 ]

board[t][0] := Owner player | -1 for neutral/unclaimed territories
board[t][1] := Number of units in that territory
---------------------------------------------------------

---------------------------------------------------------
tokens[4][P+1]
    0 | 1 | 2 | 3 
0 [ 2 | 13| 13| 13]
1 [ 0 | 0 | 0 | 0 ]
2 [ 0 | 0 | 0 | 0 ]
3 [ 0 | 0 | 0 | 0 ]

tokens[x][0] := Number of tokens of type x in the drawing pool | Type 0 : Wildcard
tokens[ ][x] := Number of tokens owned by player x-1

Note: No panic, it will be split more elegantly when implementing this in an object oriented fashion
---------------------------------------------------------

---------------------------------------------------------
availableUnits[P]
  0 | 1 | 2 
[ 0 | 0 | 0 ]


availableUnits[p] := Current available units to place for player p
Could be done more elegantly algorithmically, like with a single variable, including during the initialization sequence
---------------------------------------------------------

AM I FORGETTING SOMETHING ELSE THAT COULD BE VITAL?